---
title: "Spread of Wheat Stripe Rust in an Experimental Framework"
subtitle: "Preliminary Results: A Model for Source Detection Using EM-algorithm"
author:   
  - name: Trent VanHawkins
    affiliations:
      - ref: osu
    degrees: MS
    corresponding: true
  - name: Christopher Mundt
    affiliations:
      - ref: osu
    degrees: PhD
  - name: David Gent
    affiliations:
      - ref: usda
      - ref: osu
    degrees: PhD
  - name: Shirshendu Chatterjee
    affiliations:
      - ref: nyu
  - name: Sharmodeep Bhattacharyya
    affiliations:
      - ref: osu
    degrees: PhD
affiliations:
  - id: osu
    name: Oregon State University
  - id: usda
    name: U.S. Department of Agriculture
  - id: nyu
    name: City University of New York
format: 
  html:
    lightbox: auto
embed-resources: true
toc: true
code-fold: true
execute: 
  warning: false
code-links:
  - text: GitHub Repository
    href: https://github.com/hawktre/wheat_striperust
page-layout: full
references: references.bib
bibliography: references.bib
---

# Introduction

Previous reports for this project have documented the development and implementation of a model for the spread of Stripe Rust (*Puccinia striiformis*) among Wheat plants, using infection data collected from an experimental study conducted between April and July of 2024 at the Hyslop Crop Science Field Laboratory in Benton County, Oregon. The reports in the table below will recall the work that has been accomplished up to this point in chronological order.

| Report Name | Description |
|----------------------------|--------------------------------------------|
| 00_EDA | Exploratory Data Analysis |
| 00a_ModelingConsiderations | Modeling framework and derivations for non-linear Beta regression, accounting for zero-inflation |
| 04_ModelResults_Hurdle_logistic | Preliminary modeling results for the spread of the disease |
| 05a_SourceDetection_ModelConsiderations | Modeling framework and derivations for a source-detection model built upon the forward model. |

The remaining reports found in the 'reports' folder document incremental steps in the modeling procedure that culminate in the work produced in `04_ModelREsults_Hurld_logistic`.

In the previous report, 05a_SourceDetection_ModelConsiderations, we introduced a framework for source detection (also referred to as a 'backwards model') by leveraging the optimized model parameters from the 'forward' model in an Expectation-Maximization (EM) optimization scheme. Here, we present the initial results for this method using the present dataset.

# Methods

We have extensively documented exploratory analyses and model derivations in previous reports (above). Here, we briefly highlight those aspects of experimental design and model development which are essential to interpreting source-detection results.

## Experimental Design

This experiment was conducted between the months of April and July of 2024 at the Hyslop Crop Science Field Laboratory in Benton County, Oregon. Wheat was planted in one of four blocks (labeled A-D), each containing three replicates (plots). Within each block, each $30.5 \times 30.5$ m plot was inoculated with spores from *Puccinia stiiformis* at one, two, or four locations of equal size ($0.76 \times 0.76$ m) between April 9th and April 25th, 2024. After approximately one month, plots were surveyed weekly for **five** consecutive weeks beginning May 17th, 2024. At each survey, domain experts visually estimated disease prevalence in $1.52 \times 1.52$ m grids, expressed as a percentage (0-100) of infected plant tissue within the sampling grid. Individual sampling locations are distinguished by their distance from the plot origin in meters. Further details of the experimental design may be found on pages 6 & 7 of the EEID Project Grant.

## Data Acquisition, Cleaning, and Exploration

Survey data, along with inoculum locations were provided by Chris Mundt. Additional data capturing wind speed (mph) and direction (degrees azimuth) were acquired from a local weather station \<1 km from the survey locations at a 15-minute resolution for the duration of the study period.

## Backward Model

As in @ojwang2021, let us consider a latent variable $Z_i$ indicating the source of infection for plant $i$:

$$
Z_i \sim \text{Multinomial}(1, \boldsymbol{p}_i)
$$

Where

-   $\boldsymbol{p}_i = \left(p_{i1}, \ldots, p_{iS}\right)$
-   $p_{is} = P(Z_i = s)$
-   $\sum_{s=1}^Sp_{is} = 1$

Define the complete data as $\mathcal{X} = \left(\mathcal{Y}, \boldsymbol{Z}\right)$, where $\mathcal{Y} = \left(y_{i,t}, y_{j,t-1}, w_{ij}, d_{ij}\right)$ for all $j \neq i$. The complete-data log-likelihood is then given by:

$$
\ell(\boldsymbol{\theta} \mid \mathcal{X}) = \sum_{i=1}^n \sum_{s=1}^S \mathbb{1} \{Z_i = s\} \cdot \log f(y_{i,t} \mid \mu_{i,t}^{(s)}, \phi_t)
$$ {#eq-loglik}

where $\mu_{i,t}^{(s)}$ denotes the predicted mean intensity at $i$ assuming infection from source group $s$. We can then apply the Expectation-Maximization (EM) algorithm to estimate the posterior source probabilities $\hat p^{(s)}$. At each iteration:

$\textbf{E-step:}$ Use Bayes' rule to update $$
\hat p_i^{(s)} =  P(Z_i = s \mid \mathcal{Y}) \propto f(y_{i,t} \mid \mu_{i,t}^{(s)}, \phi_t) \cdot \pi_s
$$ {#eq-estep}

Where $\pi_s$ is the prior probability that source group $G_s$ is responsible for infection at unit $i$. We assume a uniform prior over all $S$ source groups $( \pi_s = 1/S \text{ for all } s)$.

$\textbf{M-step:}$ Maximize the expected complete-data log-likelihood $$
Q(\boldsymbol\theta) = \sum_{i=1}^n \sum_{s=1}^S \hat p_i^{(s)} \cdot \log f(y_{i,t} \mid \mu_{i,t}^{(s)}, \phi_t)
$$ {#eq-mstep}

This schematic can be made more complex by considering that dispersal dynamics may differ across source groups $s \in S$. Here, we will assume that dispersal dynamics are constant across groups. That is, we will continue to estimate a global parameter vector, $\boldsymbol\theta$ as opposed to a source-specific $\boldsymbol\theta^{(s)}$.

Note that this new modeling framework requires a prior on the number of sources $S$. We assigned each plant $i$ to one of $S$ evenly-divided and non-overlapping potential source groups $G_s \subset i \in \left\{1, 2, \ldots, n \right\}$ (@fig-sourcegroup).

```{r}
#| echo: false
#| message: false
#| label: fig-sourcegroup
#| fig-align: center
#| fig-cap: "Schematics for each of the four grouping strategies considered in this study; corresponding to 16, 8, and 4 plants per source group from left to right."
#| fig-width: 8
#| cache: true

library(tidyverse)
library(here)
library(sf)

clusters <- readRDS(here("DataProcessed/experimental/clusters.rds"))

plant_clust <- bind_rows(clusters$stripe_4$stripe_assigned %>% mutate,
                         clusters$stripe_8h$stripe_assigned,
                         clusters$stripe_8v$stripe_assigned,
                         clusters$stripe_16$stripe_assigned)

grid <- bind_rows(clusters$stripe_4$grid,
                  clusters$stripe_8h$grid,
                  clusters$stripe_8v$grid,
                  clusters$stripe_16$grid)

plant_clust_sp <- plant_clust %>% 
  select(grid_id, grid_type, geometry) %>% 
  distinct()

grid %>% 
  ggplot()+
  geom_sf(fill = "transparent")+
  geom_sf_text(aes(label = grid_id))+
  facet_wrap(~grid_type, nrow = 1)+
  labs(x = "E", y = "N")+
  theme_classic()
```

At each iteration, we update $\hat\mu_{i,t}^{(s)}$ as

$$
\hat\mu_{i,t}^{(s)} = \text{logit}^{-1}\left(\hat\eta_{i,t}^{(s)}\right) = \hat\beta + \hat\delta y_{i,t-1}(1 - y_{i,t-1}) + \hat\gamma \sum_{\{j \neq i\} \in G_s} \left(y_{j,t-1} w_{ij} (d_{ij} + d_0)^{-\hat\kappa}\right)
$$ {#eq-meanmod2}

Initial parameter values were provided as the optimized maximum likelihood estimates (MLEs) from the 'forward' model. Like the forward model, only non-zero observations at each time transition are used to optimize the parameter vector $\hat{\boldsymbol\theta}_t$. Finally, BIC was used to select the best prior number of sources.

## Interpretation

The EM algorithm produces an $N \times S$ matrix for each time transition $t$ and each replicate $b$, $\hat{\boldsymbol p}$, where each entry $\hat p_{is}$ represents the posterior probability that plant $i$ was infected by source group $s$. To make results more interpretable, we can average over the groups as

$$
\bar{\boldsymbol{p}} = \frac{1}{|G_s|}\sum_{i \in G_s} p_{is}
$$ This is a matrix of size $S \times S$ where diagonal entries represent the probability of self-infection (within-group spread), while off-diagonal entries represent the probability of cross-group infection.

## Prediction

In the experimental treatment with a single true inoculation point, we use the estimated group-level probability matrix $\bar{\boldsymbol p}$ to predict the most likely source group of infection at each replicate-transition combination. Ignoring indices for replicate and transition, we can define the most probable source of infection for each group

$$
\hat s = \text{argmax} \ \bar{\boldsymbol p}
$$

There will be $B \times T$ of these predictions, which we can use to compute a standard suite of multiclass prediction metrics such as accuracy, F-1 score, or Cohen's Kappa. We can additionally look at the these metrics at cross-sections of replicates or transitions to to learn if and where our model performs poorly.

# Results

```{r}
library(tidyverse)
library(here)
library(sf)

em_data <- readRDS(here("DataProcessed/experimental/em_dat.rds"))
em_summary <- readRDS(here("DataProcessed/results/backwards_all_fits.rds"))
clusters <- readRDS(here("DataProcessed/experimental/clusters.rds"))
inocs <- readRDS(here("DataProcessed/experimental/inoc_sp.rds"))


# Model selection ---------------------------------------------------------
## Extract Model fit metrics
fit_df <- imap_dfr(em_summary, function(plots, config_name) {
  imap_dfr(plots, function(visits, plot_id) {
    imap_dfr(visits, function(visit_result, visit) {
      tibble(
        configuration = config_name,
        plot_id = plot_id,
        visit = parse_number(visit),
        em_iters = visit_result$em_iters,
        converged = visit_result$converged,
        final_neg_loglik = visit_result$final_neg_loglik
      )
    })
  })
})

## Compute BIC
fit_df <- fit_df %>% 
  mutate(n_mix = parse_number(configuration),
         bic_k = (n_mix - 1 + 5),
         bic = bic_k * log(64) - 2 * log(abs(final_neg_loglik)))

best_mod <- fit_df %>%
  group_by(plot_id, visit) %>%
  slice_min(order_by = bic, n = 1, with_ties = FALSE) %>%
  ungroup() %>% 
  mutate(configuration = factor(configuration, 
                                levels = c("stripe_4", "stripe_8h", "stripe_8v", "stripe_16"), 
                                labels = c("2 x 2", "2 x 4", "4 x 2", "4 x 4")))
```

EM runs converged quickly for every treatment-replicate-time combination (min = `r min(fit_df$em_iters)` iters, max = `r max(fit_df$em_iters)` iters), and the $2 \times 2$ configuration (4 source groups) almost always achieved the lowest BIC. The result is somewhat expected as BIC penalizes heavily for the addition of mixture components.

It is perhaps easiest to interpret model predictions in the true spatial nature

```{r}
#| label: fig-C4by4
#| layout-ncol: 1
#| fig-cap-location: top
#| fig-cap: "Spatial visualization of predicted infection probabilities for replicate Block C with four possible source groups. Nodes indicate the probability of self-infection, while arrows indicate the probability of infection from another source. Directional edges are only displayed for the most probable source (if different from itself), with transparency encoding the weight $(\\hat p)$."
#| fig-subcap: 
#| - "Single inoculation point."
#| - "Two inoculation points."
#| - "Four inoculation points."
#| lightbox: 
#|   group: BlockC
# Get posterior summary matrix
posterior_summaries <- imap_dfr(em_summary, function(plots, config_name) {
  imap_dfr(plots, function(visits, plot_id) {
    imap_dfr(visits, function(visit_info, visit_name) {
      # Get p_mat
      p_mat <- visit_info$p_mat
      if (is.null(p_mat)) return(NULL)
      
      # Get group_id from corresponding em_data object
      group_id <- em_data[[config_name]][[plot_id]][[visit_name]]$group_id
      if (is.null(group_id)) return(NULL)
      
      # Make data frame
      df <- as.data.frame(p_mat)
      colnames(df) <- paste0("p_group", seq_len(ncol(df)))
      df$group_id <- group_id
      
      # Summarize posterior probabilities by group
      df %>%
        group_by(group_id) %>%
        summarise(across(starts_with("p_group"), mean, .names = "mean_{.col}"),
                  .groups = "drop") %>%
        mutate(configuration = config_name,
               plot_id = plot_id,
               visit = visit_name)
    })
  })
})

# Arrange for plotting
posterior_summaries_long <- posterior_summaries %>%
  select(configuration, plot_id, visit, everything()) %>% 
  pivot_longer(cols = contains("mean"), names_to = "pred_group", values_to = "preds") %>% 
  drop_na(preds) %>% 
  rename("member_group" = "group_id") %>% 
  mutate(pred_group = parse_number(pred_group))

#Create single spatial grid object
grid <- bind_rows(clusters$stripe_4$grid,
                  clusters$stripe_8h$grid,
                  clusters$stripe_8v$grid,
                  clusters$stripe_16$grid) %>% 
  mutate(configuration = case_when(grid_type == "2 x 2" ~ "stripe_4",
                                   grid_type == "4 x 2" ~ "stripe_8h",
                                   grid_type == "2 x 4" ~ "stripe_8v",
                                   grid_type == "4 x 4" ~ "stripe_16")) %>% 
  rename("geometry" = ".")

#Create single spatial centroid object
centroid <- bind_rows(clusters$stripe_4$centroid,
                  clusters$stripe_8h$centroid,
                  clusters$stripe_8v$centroid,
                  clusters$stripe_16$centroid) %>% 
  mutate(configuration = case_when(grid_type == "2 x 2" ~ "stripe_4",
                   grid_type == "4 x 2" ~ "stripe_8h",
                   grid_type == "2 x 4" ~ "stripe_8v",
                   grid_type == "4 x 4" ~ "stripe_16")) %>% 
  rename("geometry" = ".")

# self-infection probablities
nodes <- posterior_summaries_long %>% 
  filter(member_group == pred_group) %>%
  left_join(centroid, by = c("member_group" = "grid_id", "configuration")) %>% 
  select(plot_id, visit, configuration, member_group, preds, geometry) %>% 
  st_as_sf()

# cross-infection probabilities 
edges <- posterior_summaries_long %>% 
  left_join(centroid, by = c("pred_group" = "grid_id", "configuration")) %>% 
  rename(from_geometry = "geometry") %>% 
  left_join(centroid, by = c("member_group" = "grid_id", "configuration")) %>% 
  rename(to_geometry = "geometry") %>% 
  select(plot_id, visit, configuration, preds, member_group, pred_group, to_geometry, from_geometry) %>% 
  rowwise() %>%
  mutate(geometry = st_sfc(st_linestring(rbind(st_coordinates(from_geometry),
                                               st_coordinates(to_geometry))),
                           crs = st_crs(from_geometry))) %>%
  ungroup() %>% 
  select(-c(to_geometry, from_geometry)) %>% 
  st_as_sf() %>% 
  group_by(configuration, plot_id, visit, member_group) %>% 
  mutate(is_max = if_else(preds == max(preds), 1, 0)) %>% 
  slice_max(preds) %>% 
  ungroup()

#Plot it
library(wesanderson)

self_infection <- wes_palette("Zissou1", 7, type = "continuous")

config_match <- data.frame(name = c("stripe_4", "stripe_8h", "stripe_8v", "stripe_16"),
                           config = c("2 x 2", "2 x 4", "4 x 2", "4 x 4"))

spat_plots <- list()

for (config in unique(edges$configuration)) {
  for (plt in unique(edges$plot_id)) {
    config_type <- config_match %>% filter(name == !!config) %>% .$config
    
    spat_plots[[paste0(plt, "_", config)]] <- ggplot() +
      geom_sf_label(data = nodes %>% filter(plot_id == plt, configuration == config), aes(fill = preds, label = member_group))+
      geom_sf(data = edges %>% filter(plot_id == plt, configuration == config, is_max == 1, member_group != pred_group),
              aes(alpha = preds), 
              arrow = arrow(type = "closed", length = unit(0.075, "inches")))+
      geom_sf(data = grid %>% filter(configuration == config), fill = "transparent")+
      geom_sf(data = inocs %>% filter(plot_inoc_id == plt), size = 2, shape = 23, fill = "#F8766D") +
      facet_wrap(~visit, nrow = 1)+
      theme(legend.position = "bottom")+
      scale_alpha_continuous(limits = c(0, 1))+
      scale_fill_gradientn(colors = self_infection, limits = c(0,1)) + 
      labs(title = paste0("Spatial Network Predictions (", config_type, ", ", plt, ")"),
           fill = "Self Infection",
           alpha = "Dispersed Infection",
           x = "East",
           y = "North")+
      theme_classic() +
      theme(legend.position = "bottom")
  }
}

spat_plots[["C1_stripe_4"]]
spat_plots[["C2_stripe_4"]]
spat_plots[["C4_stripe_4"]]
```

```{r}
# Make ground truth for prediction ----------------------------------------
single_inocs <- inocs %>%
  filter(str_detect(plot_inoc_id, "1"))

grid_truth <- grid %>% select(configuration, grid_id) 

for (plt in single_inocs$plot_inoc_id) {
  tmp <- single_inocs %>% filter(plot_inoc_id == plt)
  
  grid_truth[plt] <- as.numeric(lengths(st_contains(grid_truth, tmp)) > 0)
}

ground_truth <- grid_truth %>%
  pivot_longer(cols = A1:D1, names_to = "plot_id") %>% 
  filter(value == 1) %>% 
  select(configuration, plot_id, grid_id, value, geometry) %>% 
  arrange(plot_id)



prediction_df <- posterior_summaries_long %>% 
  filter(str_detect(plot_id, "1")) %>% 
  group_by(plot_id, configuration, visit) %>% 
  filter(preds == max(preds)) %>% 
  ungroup() %>% 
  select(configuration, plot_id, visit, pred_group) %>% 
  left_join(ground_truth, by = c("configuration", "plot_id")) %>% 
  rename("true_group" = grid_id) %>% 
  st_drop_geometry() %>% 
  select(-c(value, geometry))
  

pred_4   <- prediction_df %>% filter(configuration == "stripe_4") %>% mutate(across(c(true_group, pred_group), ~ factor(.x, levels = 1:4)))
pred_8h   <- prediction_df %>% filter(configuration == "stripe_8h")%>% mutate(across(c(true_group, pred_group), ~ factor(.x, levels = 1:8)))
pred_8v  <- prediction_df %>% filter(configuration == "stripe_8v")%>% mutate(across(c(true_group, pred_group), ~ factor(.x, levels = 1:8)))
pred_16  <- prediction_df %>% filter(configuration == "stripe_16")%>% mutate(across(c(true_group, pred_group), ~ factor(.x, levels = 1:16)))

library(tidymodels)
multi_metrics <- metric_set(accuracy, kap, f_meas)

metrics_config <- list(
  stripe_4  = pred_4,
  stripe_8h = pred_8h,
  stripe_8v = pred_8v,
  stripe_16 = pred_16
) |> 
  purrr::imap_dfr(~ multi_metrics(.x, truth = true_group, estimate = pred_group) |> 
                    mutate(configuration = .y), .id = NULL)

metrics_config_plot <- list(
  stripe_4  = pred_4,
  stripe_8h = pred_8h,
  stripe_8v = pred_8v,
  stripe_16 = pred_16
) |> 
  purrr::imap_dfr(~ .x %>%
                    group_by(plot_id) %>%
                    multi_metrics(truth = true_group, estimate = pred_group) %>%
                    mutate(configuration = .y),
                  .id = NULL)

metrics_config_visit <- list(
  stripe_4  = pred_4,
  stripe_8h = pred_8h,
  stripe_8v = pred_8v,
  stripe_16 = pred_16
) |> 
  purrr::imap_dfr(~ .x %>%
                    group_by(visit) %>%
                    multi_metrics(truth = true_group, estimate = pred_group) %>%
                    mutate(configuration = .y),
                  .id = NULL)

acc_4 <- metrics_config %>% filter(.metric == "accuracy", configuration == "stripe_4") %>% .$.estimate
f1_4 <- metrics_config %>% filter(.metric == "f_meas", configuration == "stripe_4") %>% .$.estimate
```

What we observe from @fig-C4by4 is the consistent ability of the model to identify sources of infection through the **self-infection** probabilities. The model is also able to discern cross-infection probabilities well in the case that there is a strong signal from a single source (e.g. multiple inoculations fall within a single source group). Only block C is shown in the pictures above for brevity; however, we can compute prediction metrics such as accuracy or F-score in the case that we only have a single inoculation point. Recall that $F_1$ score (harmonic mean) is computed as

$$
F_1 = 2 \cdot \frac{\text{precision} \cdot \text{recall}}{\text{precision} + \text{recall}}
$$ For the $4 \times 4$ configuration, the model achieved an accuracy of `r round(acc_4, 3)` and an $F_1$-score of `r round(f1_4, 3)`. Although BIC selected the $4 \times 4$ configuration as the best-fitting model, we may still want to investigate its predictive ability at finer scales.

```{r}
#| label: fig-Cother
#| layout-ncol: 1
#| fig-cap-location: top
#| fig-cap: "Spatial visualization of predicted infection probabilities for replicate Block C with eight or sixteen possible source groups. Nodes indicate the probability of self-infection, while arrows indicate the probability of infection from another source. Directional edges are only displayed for the most probable source (if different from itself), with transparency encoding the weight $(\\hat p)$."
#| fig-subcap: 
#| - "Eight possible source groups positioned horizontally."
#| - "Eight possible source groups positioned vertically."
#| - "Sixteen possible source groups."
#| lightbox: 
#|   group: BlockC-other
acc_8h <- metrics_config %>% filter(.metric == "accuracy", configuration == "stripe_8h") %>% .$.estimate
acc_8v <- metrics_config %>% filter(.metric == "accuracy", configuration == "stripe_8v") %>% .$.estimate
acc_16 <- metrics_config %>% filter(.metric == "accuracy", configuration == "stripe_16") %>% .$.estimate

spat_plots[["C1_stripe_8h"]]
spat_plots[["C1_stripe_8v"]]
spat_plots[["C1_stripe_16"]]
```

@fig-Cother gives a spatial visualization of predictions with eight or sixteen possible source groups. Here, we see that the model may be able to distinguish the correct source group at earlier visits, but finds other sources to be more probable for self-infection as the plot becomes saturated with the disease. The configuration with eight horizontally-oriented source groups achieved an overall accuracy of `r round(acc_8h, 3)`; eight vertically-oriented source groups an accuracy of `r round(acc_8v, 3)`; and sixteen source groups an accuracy of `r round(acc_16, 3)`. Spatially, we can see that the most probable source group is often neighboring the true source group. Some other replicates showed better success on a finer grid (@fig-config16).

```{r}
#| label: fig-config16
#| layout-ncol: 1
#| fig-cap-location: top
#| fig-cap: "Spatial visualization of predicted infection probabilities for all replicate blocks with sixteen possible source groups. Nodes indicate the probability of self-infection, while arrows indicate the probability of infection from another source. Directional edges are only displayed for the most probable source (if different from itself), with transparency encoding the weight $(\\hat p)$."
#| fig-subcap: 
#| - "Block A"
#| - "Block B"
#| - "Block C"
#| - "Block D"
#| lightbox: 
#|   group: config16
spat_plots[["A1_stripe_16"]]
spat_plots[["B1_stripe_16"]]
spat_plots[["C1_stripe_16"]]
spat_plots[["D1_stripe_16"]]
```

Overall, we conclude that our model shows meaningful success in its ability to detect a single source in this experimental setting. More work is needed to assess the models ability to detect multiple sources. Primarily, we must investigate how we evaluate the models classification abilities in a multiclass setting when there is more than one correct class.

# References

::: {#refs}
:::

# Appendix

## All Figures

```{r}
#| lightbox: 
#|   group: appendix

for (i in 1:length(spat_plots)) {
  print(spat_plots[[i]])
}
```

## Overall predictions

```{r}
#| label: tbl-overall
#| tbl-cap: "Overall prediction metrics by configuration--across visits and replicates. Predictions were only made for a single true inoculation point."
metrics_config %>% 
  select(-.estimator) %>% 
  pivot_wider(names_from = .metric, values_from = .estimate) %>% 
  mutate(configuration = c("2 x 2", "2 x 4", "4 x 2", "4 x 4")) %>% 
  rename("Configuration" = configuration,"Accuracy" = accuracy, "Cohen's Kappa" = kap, "F1" = f_meas) %>% 
  kableExtra::kable(digits = 3) %>% 
  kableExtra::kable_styling()
```

## Prediction (Plot Cross-section)

```{r}
#| label: tbl-plot
#| tbl-cap: "Accuracy by configuration and replicate-across visits. Predictions were only made for a single true inoculation point."
metrics_config_plot %>% 
  filter(.metric == "accuracy") %>% 
  select(-.estimator) %>% 
  pivot_wider(names_from = .metric, values_from = .estimate) %>%  
  rename("Configuration" = configuration,"Accuracy" = accuracy) %>% 
  kableExtra::kable(digits = 3) %>% 
  kableExtra::kable_styling()
```

## Prediction (Visit Cross-section)

```{r}
#| label: tbl-visit
#| tbl-cap: "Accuracy by configuration and visit-across replicates. Predictions were only made for a single true inoculation point."
metrics_config_visit %>% 
  filter(.metric == "accuracy") %>% 
  select(-.estimator) %>% 
  pivot_wider(names_from = .metric, values_from = .estimate) %>%  
  rename("Configuration" = configuration,"Accuracy" = accuracy, "Visit" = visit) %>% 
  kableExtra::kable(digits = 3) %>% 
  kableExtra::kable_styling()
```
