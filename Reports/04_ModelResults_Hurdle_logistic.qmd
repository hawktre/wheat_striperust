---
title: "Spread of Wheat Stripe Rust in an Experimental Framework"
subtitle: "Preliminary Results: Accounting for non-diseased plants and logistic Auto-infection"
author:   
  - name: Trent VanHawkins
    affiliations:
      - ref: osu
    degrees: MS
    corresponding: true
  - name: Christopher Mundt
    affiliations:
      - ref: osu
    degrees: PhD
  - name: David Gent
    affiliations:
      - ref: usda
      - ref: osu
    degrees: PhD
  - name: Shirshendu Chatterjee
    affiliations:
      - ref: nyu
    degrees: PhD
  - name: Sharmodeep Bhattacharyya
    affiliations:
      - ref: osu
    degrees: PhD
affiliations:
  - id: osu
    name: Oregon State University
  - id: usda
    name: U.S. Department of Agriculture
  - id: nyu
    name: City University of New York
format: html
embed-resources: true
toc: true
code-fold: true
execute: 
  warning: false
code-links:
  - text: GitHub Repository
    href: https://github.com/hawktre/wheat_striperust
page-layout: full
references: references.bib
bibliography: references.bib
---

# Introduction

In the previous EDA report, we documented exploratory analyses and data cleaning procedures for Stripe Rust (*Puccinia striiformis*) infection data collected from an experimental study conducted between April and July of 2024 at the Hyslop Crop Science Field Laboratory in Benton County, Oregon. Building on this, we examined the modeling approaches proposed by @gent2019 and @ojwang2021 for predicting the spread of Hop Powdery Mildew (*Podosphaera macularis*) and adapted their framework to our experimental data. Initial applications of this model revealed a key issue: the presence of zeros in the response led to non-convergence and undefined log-likelihoods during early stages of disease propagation. To address this, we introduced a hurdle model to explicitly account for the structural absence of disease. In this report, we extend that work by exploring a logistic autoinfection term to more realistically model disease growth dynamics.


# Methods

We extensively document the derivation of the present methodology in the previous report, titled "Modeling Considerations". Here, we briefly highlight those aspects of experimental design and model development which are essential to interpreting model results.

## Experimental Design

This experiment was conducted between the months of April and July of 2024 at the Hyslop Crop Science Field Laboratory in Benton County, Oregon. Wheat was planted in one of four blocks (labeled A-D), each containing three replicates (plots). Within each block, each $30.5 \times 30.5$ m plot was inoculated with spores from *Puccinia stiiformis* at one, two, or four locations of equal size ($0.76 \times 0.76$ m) between April 9th and April 25th, 2024. After approximately one month, plots were surveyed weekly for **five** consecutive weeks beginning May 17th, 2024. At each survey, domain experts visually estimated disease prevalence in $1.52 \times 1.52$ m grids, expressed as a percentage (0-100) of infected plant tissue within the sampling grid. Individual sampling locations are distinguished by their distance from the plot origin in meters. Further details of the experimental design may be found on pages 6 & 7 of the EEID Project Grant.

## Data Acquisition, Cleaning, and Exploration

Survey data, along with inoculum locations were provided by Chris Mundt. Additional data capturing wind speed (mph) and direction (degrees azimuth) were acquired from a local weather station \<1 km from the survey locations at a 15-minute resolution for the duration of the study period.

## Modeling Framework

The present model being considered is the similar to that described in the model considerations report and the preliminary results report. Now, let us consider an additional random variable $V_{i,t} \sim \text{Bernoulli}(\pi_t)$ which indicates whether plant $i$ is infected at time $t$. 

$$
V_{i,t} = \begin{cases} 1 & y_{i,t} = 0 \\
0 & y_{i,t} > 0\end{cases}
$$
Now, we can consider the conditional distribution 

$$
f(y_{i,t} | V_{i,t}, \pi_t, \mu_{i,t}, \phi_t) = \begin{cases}\pi_t & v_{i,t} = 1\\
(1 - \pi_t) \cdot \text{Beta}(\mu_{i,t}\phi_t, (1 - \mu_{i,t}) \phi_t) & v_{i,t} = 0 \end{cases}
$$

The expectation is then given by 

$$
\begin{split}
E\left[y_{i,t}\right] &= \pi_t \times p(v_{i,t} = 1) + P(v_{i,t} = 0) \times E\left[y_{i,t}\right] \\
&= (1-\pi_t) \times \mu_{i,t}
\end{split}
$$

Recall that, following the framework in @gent2019, we propose a mean structure for non-zero observations using the logit-link. Here, we propose a logistic growth term for the auto-infection component of the mode: 

$$
\log\left(\frac{\mu_{i,t}}{1-\mu_{i,t}}\right) = \eta_{i,t} = \beta+ \delta y_{i,t-1}(1 - y_{i,t-1}) + \gamma\sum_{j \neq i}\left(y_{j,t-1}w_{ij} (d_{ij} + d_0)^{-\kappa}\right)
$$ {#eq-meanmod}

Note that we will have to change one derivative in our gradient to: 

$$
\frac{\partial\eta}{\partial\delta} = y_{i,t-1}(1-y_{i,t-1})
$$

Variables, parameters definitions, and interpretations for @eq-meanmod are outlined in @tbl-covars.

::: {#tbl-covars}
| Variable | Description |
|:-----------------------------------|:-----------------------------------|
| $y_{i,t-1}$ | Proportion of diseased plant tissue at survey unit $i$ in the previous time point. |
| $y_{j,t-1}$ | Proportion of diseased plant tissue at survey unit $j$ in the previous time point. |
| $w_{ij}$ | Wind vector on $i - j$ direction at the prior time point. |
| $d_{ij}$ | Distance between survey unit $i$ and $j$. |
| $d_0$ | A constant (optional) distance offset to avoid division errors at 0. |

: Variable definitions for the proposed model. {#tbl-vars}

| Parameter | Interpretation |
|:-----------------------------------|:-----------------------------------|
| $\beta$ | Baseline log-odds of disease, after accounting for autoinfection and disease spread. |
| $\delta$ | Change in log-odds of disease associated with autoinfection for each survey unit. |
| $\gamma$ | Distance-adjusted change in log-odds of disease associated with disease spread from other survey units, after accounting for autoinfection. |
| $\kappa$ | Dispersal parameter providing distance adjustment to change in log-odds of disease associated with individual sources; scales latter non-linearly with distance away from target. |

: Model parameters and interpretations from the proposed model. {#tbl-params}

Interpretations for model variables and parameters under the current formulation.
:::

Recall that we estimate $\pi_t$ using the MLE. For $n$ observations, we have 

$$
\hat\pi_t = \frac{1}{n} \sum_{i=1}^n V_{i,t}
$$

We then fit the model for non-zero observations using the `optim()` function in `{r} R.version.string` with the quasi-Newton optimization method BFGS. Initial values for the optimization were generated by fixing $\kappa^{(1)} \in {0.25, 0.5, 0.75, \ldots, 2.5}$ to temporarily linearize Equation @eq-meanmod, and then fitting $(\beta, \delta, \gamma)$ using ordinary least squares. The precision parameter $\phi$ was initialized using a method of moments estimator.  Complete derivations and implementation details, including computations for the wind projection $w_{ij}$, are provided in the supplementary document, "00a_ModelingConsiderations.qmd".

# Results

Recall that plots are organized by replicate blocks labeled A through D. Within each replicate, there were three treatment levels (one inoculation, two inoculations, or four inoculations). At each replicate-treatment combination, there were $n = 64$ sites systematically surveyed in a grid-layout. @tbl-disease summarizes disease intensity across surveys and includes the proportion of zero-infection plants at the first two visits.

```{r}
#| label: tbl-disease
#| tbl-cap: "Summaries of disease intentisty (%) at each survey, reported mean(sd), in addition to the proportion of plants recorded as having no disease at surveys 1 and 2."
library(tidyverse)
library(here)
library(gt)

# Read in data
stripe <- readRDS(here("DataProcessed/experimental/stripe_clean.rds"))

stripe_summary <- stripe %>% 
  group_by(plotID_new, visit) %>% 
  summarise(mean_disease = paste0(round(mean(intensity), 2), "(", round(sd(intensity), 2), ")"),
            zeros = paste0(sum(intensity == 0), "(", round(sum(intensity == 0)/n(), 3), ")"),
            .groups = "drop") %>% 
  ungroup()

# pivot to wide format
summary_wide <- stripe_summary %>%
  pivot_wider(
    names_from = visit,
    values_from = c(mean_disease, zeros)
  ) %>% 
  select(-c(zeros_visit3, zeros_visit4, zeros_visit5))

# make gt table
summary_wide %>%
  gt(rowname_col = "plotID_new") %>%
  tab_spanner(
    label = "Disease Intensity",
    columns = starts_with("mean_disease")
  ) %>%
  tab_spanner(
    label = "Zeros",
    columns = starts_with("zeros")
  ) %>%
  cols_label(
    .list = setNames(
      nm = names(summary_wide)[-1],
      object = gsub(".*_", "", names(summary_wide)[-1])  # clean column names
    )
  )

```

Also recall from @eq-meanmod that the dispersal term involves a projected wind vector denoted $w_{ij}$. Wind data were summarized for each inter-visit period, which spanned approximately one week. Summaries for wind run in each of the 16 inter-cardinal directions are provided in @fig-windsum, with survey periods defined in @tbl-periods

```{r}
#| label: fig-windsum
#| fig-width: 10
#| fig-cap: "Windroses for each of the priods for which wind data were grouped to compute the projected wind vector."
library(circular)
library(climaemet)
wind <- readRDS(here("DataProcessed/wind/wind_clean.rds"))

#Create the lagged dataset
stripe.lag <- stripe %>% 
  arrange(plotID_new, plant_num, visit) %>% 
  group_by(plant_id) %>%
  mutate(intensity = intensity/100,
         intensity_prev = lag(intensity),
         date_prev = lag(date)) %>% 
  ungroup() %>% 
  filter(visit != "visit1")

#Set survey periods 
survey_periods <- stripe.lag %>% 
  select(visit, date, date_prev) %>% 
  distinct() %>% 
  group_by(visit) %>% 
  summarise(date = max(date),
            date_prev = min(date_prev),
            .groups = "drop")

wind_filter <- wind %>% 
  mutate(period = case_when(datetime >= survey_periods$date_prev[1] & datetime <= survey_periods$date[1] ~ "Visit 1 - Visit 2",
                            datetime >= survey_periods$date_prev[2] & datetime <= survey_periods$date[2] ~ "Visit 2 - Visit 3",
                            datetime >= survey_periods$date_prev[3] & datetime <= survey_periods$date[3] ~ "Visit 3 - Visit 4",
                            datetime >= survey_periods$date_prev[4] & datetime <= survey_periods$date[4] ~ "Visit 4 - Visit 5",
                            T ~ "no_period")) %>% 
  filter(period != "no_period")

wind_colors <- wesanderson::wes_palette(name = "Zissou1", n = 4, type = "continuous")
ggwindrose(speed = wind_filter$speed, 
             direction = wind_filter$direction,
           speed_cuts = c(2, 3, 5, max(wind_filter$speed)),
           n_directions = 16,
           facet = factor(wind_filter$period),
           n_col = 4)+
  labs(fill = "Wind Speed (m/s)")+
  theme(legend.position = "bottom") + 
  scale_fill_manual(values = wind_colors)

ggsave("WindSummary_Stratified.png", path = here("Reports/CAS_poster/"), width = 12, height = 4, units = "in")
```

```{r}
#| label: tbl-periods
#| tbl-cap: "Dates defining time between survey periods"
survey_periods %>% 
  select(visit, date_prev, date) %>% 
  mutate(Days = date -date_prev,
         date_prev = format(as.Date(date_prev), "%B %d, %Y"),
         date = format(as.Date(date), "%B %d, %Y"),
         visit = c("Visit 1 - Visit 2", "Visit 2 - Visit 3", "Visit 3 - Visit 4", "Visit 4 - Visit 5")) %>% 
  rename("Visit Period" = visit,
         "First Day" = date_prev,
         "Last Day" = date) %>% 
  gt()
```

@fig-params shows unconstrained parameter estimates at each transition (e.g. "Visit 2" is the transition from "Visit 1" to "Visit 2"), using the logistic auto-infection term and hurdle-model approach.

```{r}
#| label: fig-params
#| fig-cap: "Parameter estimates reported for each transition (e.g. 'Visit 2' denotes the transition from 'Visit 1' to 'Visit 2') on the log-odds scale."
#| fig-width: 10
#| fig-height: 8
library(tidyverse)
library(data.table)
library(here)
library(RColorBrewer)

greek_cols <- RColorBrewer::brewer.pal(5, "Set1")

#Read in results

## Fits results
fits <- readRDS(here("DataProcessed/results/forward_model/forward_fits.rds"))

plot_theta <- function(fits, title){
  #Pivot-longer for tables and plotting
  theta_long <- fits %>%
    dplyr::select(block, treat, visit, theta) %>%
    unnest_wider(theta) %>%         # Step 2: unpack theta list column
    pivot_longer(
      cols = c(beta, delta, gamma, kappa, phi),  # adjust if other parameters present
      names_to = "parameter",
      values_to = "estimate"
    ) 
  
  theta_long %>% 
    ggplot(aes(x = as.numeric(visit), y = estimate, colour = parameter)) +
    geom_point(size = 2) +
    geom_line(linewidth = 1) +
    facet_grid(block~treat, scales = "free_y") +
    labs(y = "Estimate", 
         x = "Visit", 
         title = title) +
    scale_color_manual(
      name = "Parameter",
      values = c("beta" = greek_cols[1], "delta" = greek_cols[2], "gamma" = greek_cols[3], 
                 "kappa" = greek_cols[4], "phi" = greek_cols[5]),
      labels = c(
        beta = expression(beta),
        delta = expression(delta),
        gamma = expression(gamma),
        kappa = expression(kappa),
        phi = expression(phi)
      )
    ) +
    theme(legend.position = "bottom")
}

plot_theta(fits, expression(bold(theta)~"over visits 2-5 (unconstrained)"))
```

We also provide a tabular summary of the mode estimates in @tbl-params. One notable improvement over the hurdle model considered in the previous report is the appearance of more biologically plausible values of $\hat{\kappa}$. Although some estimates remain negative, they now fall within a tolerable range of zero. Additionally, nearly all estimates of $\delta$ and $\gamma$ are greater than zero, with the exception of the Block C, Visit 2 treatment with a single inoculation point. This exception is likely due to the very low levels of disease observed in that treatment-replicate combination, which may obscure the estimation of the dispersal effect.

```{r}
#| label: tbl-params
#| tbl-cap: "Tabular parameter estimes reported for each transition (e.g. 'Visit 2' denotes the transition from 'Visit 1' to 'Visit 2') on the log-odds scale, matching with @fig-params. Red rows indicate $\\hat\\kappa < 0$."
params_df <- fits %>%
  dplyr::select(block, treat, visit, theta) %>%
  unnest_wider(theta)

params_df %>% 
  kableExtra::kable(
    digits = 2,
    format = "html",  # ensure HTML output
    col.names = c(
      "Plot ID", "Visit", "Initial &kappa;", 
      "&beta;", "&delta;", "&gamma;", "&kappa;", "&phi;"
    ),
    escape = FALSE  # important!
  ) %>%
  kableExtra::kable_styling(
    bootstrap_options = c("hover", "condensed", "responsive")
  ) %>% 
  kableExtra::row_spec(row = which(params_df$kappa < 0), background = "#ffcccc")

```

From @fig-params and @tbl-params, we make some similar observations to the previous report and note that this trend is becoming more apparent as we further refine the model. It is a common trend among all plots for the parameters all parameter estimates to  tend toward 0 as transitions progress. Issues of identifiability with $\gamma$ and $\kappa$ seem to be largely resolved at this point in the modeling process. 

We also visualize predictions and deviance residuals to get an idea of the predictive utility of the current models. @fig-prediction shows a visualization of true vs. predicted values for the treatments in block B. Predictions and residuals for the remaining replicates are available in the appendix of this report. 

```{r}
#| label: fig-prediction
#| fig-cap: "Predicted vs. true disease intensity values at each time transition for block B."
#| fig-height: 15
library(sf)
library(ggpubr)
#Create a dataframe with all of the predicted results and true values
df <- fits %>% 
  select(block, treat, visit, fitted) %>% 
  unnest_longer(fitted, indices_to = "plant_id") %>% 
  mutate(plant_id = as.numeric(plant_id),
         treat = as.numeric(treat))

stripe_long <- stripe %>% 
  select(block, inoculum_total, visit, plant_num, intensity, east, north) %>% 
  st_as_sf(coords = c("east", "north")) %>% 
  mutate(intensity = intensity/100,
         visit = as.character(parse_number(visit)),
         plant_num = as.numeric(plant_num)) %>% 
  rename(treat = inoculum_total,
         plant_id = plant_num)

#Join with unique plant id's and spatial coordinates
plot_df <- left_join(df, stripe_long, by = c("block", "treat", "visit", "plant_id")) %>% 
  select(block, treat, visit, plant_id, fitted, intensity, geometry) %>% 
  st_as_sf() %>% 
  rename(predicted = fitted,
         true = intensity) %>% 
  pivot_longer(cols = c("predicted", "true"), values_to = "intensity", names_to = "type")

#read in inoculation spatial data
inoc_sp <- readRDS(here("DataProcessed/experimental/inoc_sp.rds")) %>% 
  select(block, inoculum_total, inoculum_num, geometry) %>% 
  rename(treat = inoculum_total,
         id = inoculum_num)



#Function to make plots 
pred_spplot <- function(blk, trt){
  #Load up color palatte
  colors <- wesanderson::wes_palette(name = "Zissou1", n = 5, type = "continuous")
  
  # Filter for the block we want
  stripe.dat <- plot_df %>% filter(block == blk, treat == trt)
  inoc.dat <- inoc_sp %>% filter(block == blk, treat == trt)
  
  #Plot using raw intensity to color
  ggplot()+
    geom_sf(data = stripe.dat, 
            aes(color = intensity), 
            size = 3)+
    geom_sf(data = inoc.dat, 
            aes( fill= "Inoculation Point"), 
            shape = 23, size = 3, alpha = 0.7)+
    facet_grid(rows = vars(type), cols = vars(visit))+
    labs(fill = "",
         color = "Disease Intensity",
         title = paste0("Predicted vs. True Intensity (Plot ", blk, trt, ")"))+
    theme_grey()+
    scale_color_gradient(low = colors[1], high = colors[4])+
    theme(legend.position = "bottom")
}

plt_b1 <- pred_spplot(blk = "B", trt = 1)
plt_b2 <- pred_spplot(blk = "B", trt = 2)
plt_b4 <- pred_spplot(blk = "B", trt = 4)

ggarrange(plotlist = list(plt_b1, plt_b2, plt_b4), nrow = 3, ncol = 1)
```

We can also examine the deviance residuals [@ferrari2004a] for the same block (@fig-resid). 

```{r}
#| label: fig-resid
#| fig-cap: "Deviance residuals across visits for block B."
#| fig-height: 7
#| fig-width: 8


df_resid <- fits %>% 
  select(block, treat, visit, resid) %>% 
  unnest_longer(resid, indices_to = "plant_id") %>% 
  mutate(plant_id = as.numeric(plant_id),
         treat = as.numeric(treat))

df_resid_plt <- left_join(df, df_resid, by = c("block", "treat", "visit", "plant_id"))

df_resid_sp <- left_join(df_resid_plt, stripe_long, by = c("block", "treat", "visit", "plant_id")) %>% 
  st_as_sf()
  
df_resid_plt %>% 
filter(block == "B") %>% 
  ggplot(aes(x = fitted, y = resid)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_label(data = function(d) filter(d, abs(resid) > 3),
            aes(label = plant_id), 
            vjust = 1.5, 
            size = 3) +
  facet_grid(treat ~ visit) + 
  labs(y = "Deviance Residual", x = "Predicted Intensity")
```

From @fig-resid, we see no particular pattern in the residuals. It is note-worthy, however, that we still see some drastic underprediction of disease intensity in the early visits. Particularly at visit 3.

```{r}
#| label: fig-highresid
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Spatial data representation, color-coded by residual value. Red indicates a high residual. Plants with a an absolute residual > 3 are labeled."

library(ggrepel)
# Filter for the block we want
stripe.dat.B <- df_resid_sp %>% filter(block == "B", visit %in% c(2, 3))
inoc.dat.B <- inoc_sp %>% filter(block == "B")

intensity_cols <- wesanderson::wes_palette(name = "Zissou1", n = 5, type = "continuous") 
  #Plot using raw intesity to color
  ggplot()+
    geom_sf(data = stripe.dat.B , aes(color = resid), size = 3)+
    geom_sf_label(data = stripe.dat.B %>% filter(abs(resid) > 3),
                 aes(label = plant_id),
                 size = 2, 
                 nudge_x = 1.5,
                 nudge_y = -1)+
    geom_sf(data = inoc.dat.B, 
            aes(fill = "Inoculation Point"), 
            shape = 23, size = 3, alpha = 0.7)+
    facet_grid(rows = vars(treat), cols = vars(visit))+
    labs(fill = "",
         color = "Deviance Residual",
         title = paste0("Deviance Residuals in Space (Block B)"))+
    theme_grey()+
    scale_color_gradient(low = intensity_cols[1], high = intensity_cols[5])+
    theme(legend.position = "right")
```
@fig-highresid visualizes residual values in space and shows us that those plants who are severely underpredicted are often those that are closest to the sources. 

# Discussion

This report presents results from a reformulated model that incorporates a hurdle structure to explicitly handle non-diseased plants at early time points and accounts for non-linear growth in autoinfection. Of the model structures explored to date, this version yields the most interpretable and biologically realistic parameter estimates. In particular, the inclusion of a logistic aggregation term in the autoinfection component more accurately reflects the dynamics of disease progression observed in this experiment.

We also note that the largest deviance residuals tend to occur in plants located nearest to the inoculation sources (@fig-highresid). These plants often exhibit high disease intensity and behave as population outliers, posing challenges for accurate prediction. However, such outliers are biologically meaningful, representing critical inflection points in the spatial spread of disease. Future modeling efforts could explicitly account for the influential nature of source-adjacent plants—either through spatial covariates or alternative residual weighting schemes.

# References

::: {#refs}
:::

# Appendix

## Predictions & Residuals (Remaining Blocks)

### Block A

```{r}
#| fig-height: 15
#| fig-width: 10
## Block A
plt_a1 <- pred_spplot(blk = "A", trt = 1)
plt_a2 <- pred_spplot(blk = "A", trt = 2)
plt_a4 <- pred_spplot(blk = "A", trt = 4)

ggarrange(plotlist = list(plt_a1, plt_a2, plt_a4), nrow = 3, ncol = 1)
```

```{r}
#| fig-width: 10
### Residuals
df_resid_sp %>% 
  filter(block == "A") %>% 
  ggplot(aes(x = fitted, y = resid))+
  geom_point()+
  geom_hline(yintercept = 0, linetype  ="dashed")+
  facet_grid(treat~visit) + 
  labs(y = "Deviance Residual", x = "Predicted Intensity")
```

### Block C

```{r}
#| fig-height: 15
#| fig-width: 10
plt_c1 <- pred_spplot(blk = "C", trt = 1)
plt_c2 <- pred_spplot(blk = "C", trt = 2)
plt_c4 <- pred_spplot(blk = "C", trt = 4)

ggarrange(plotlist = list(plt_c1, plt_c2, plt_c4), nrow = 3, ncol = 1)
```

```{r}
#| fig-width: 10
df_resid_sp %>% 
  filter(block == "C") %>% 
  ggplot(aes(x = fitted, y = resid))+
  geom_point()+
  geom_hline(yintercept = 0, linetype  ="dashed")+
  facet_grid(treat~visit) + 
  labs(y = "Deviance Residual", x = "Predicted Intensity")
```

### Block D

```{r}
#| fig-height: 15
#| fig-width: 10
plt_d1 <- pred_spplot(blk = "D", trt = 1)
plt_d2 <- pred_spplot(blk = "D", trt = 2)
plt_d4 <- pred_spplot(blk = "D", trt = 4)

ggarrange(plotlist = list(plt_d1, plt_d2, plt_d4), nrow = 3, ncol = 1)
```

```{r}
#| fig-width: 10
df_resid_sp %>% 
  filter(block == "D") %>% 
  ggplot(aes(x = fitted, y = resid))+
  geom_point()+
  geom_hline(yintercept = 0, linetype  ="dashed")+
  facet_grid(treat~visit) + 
  labs(y = "Deviance Residual", x = "Predicted Intensity")
```
